
/* Proposal for Mangrove JS API */ 
/* Targets: 
   * UI creators 
   * Market maker nodes 
   * casual CLI interaction with mangrove 
   * Keeper bot writers 
   * Multisig governance 
*/ 
 
// initalize 
const mgv = new Mangrove(<connection info>,<optional contract address>) 
market.ensureApprove(address or symbol) 
 
// govern 
// (TODO, will need to generate calldata, send it to a multisig...) 
 
 
// connect to market 
const market = new mgv.market("WETH","DAI") 
// - in the back runs the event loop to maintain the status of the OB
// - throws if market is innactive or mgv is dead

//alternative: 
const market = mgv.market({address:0x..., name:"WETH"},{address:0x...,name:"DAI"}) 
 
 
// low level access 
const contract = mgv.contract();  //Mgv public functions </optional>
contract.marketOrder(...) // ethers.js method created from ABI 
market.contract (will have a subset of actual methods or pass optional abi argument)
market.[quote|base] returns erc contract (to query balanceOf and approve) 


// taker access 
// interactions throw if taker is not approved (for quote)
market.buy({gives:x,wants:x}) 
market.buy({wants:x,price:x}) 
market.sell({...}) 
market.buy(offer:ofr) 
market.buy(offers:[offerId1,..]) 
market.Sell({...}) 
 
 
// universal option: dry running 
market.[buy|sell]({gives,wants},{dryRun:true}); 
 
 
// failing on purpose 
// sets infinite approves on failer routing contract 
market.setupKeeperContract(<optional contract address>) 
// routes all orders through a contract which reverts if order was successful 
market.buy({gives,wants},{wantToFail:true}); 
 
 
// maker access (already deployed contract) 
// one cannot assume that maker contract is approved for quote and base
maker = new market.maker(address,{optional: remap method names}) 
 
 
// post new offer 
// will asynchronously read logs and find the new offer id generated by the tx and return it 
// will call gasreq/gasprice-less overloaded methods if arguments not provided 
// gasprice-less method is using local gasprice (which at init time is mangrove.gasprice * x)
// gasreq-less method is using maker contract gasreq (which is accessible via a view)
// will automatically set a pivotId if not provided, by looking at latest orderbook data 
const offer = maker.newBuyOffer({wants,gives,gasprice?,gasreq?,pivotId?}) 
const offer = maker.newBuyOffer({wants,price,...}) 
const offer = maker.newSellOffer({...}) 
 
 
// update offer 
offer.update({wants,gives,gasprice?,gasreq?,pivotId?}) 
maker.update(Buy|Sell)Offer({offer:<offer object or offer id>,...}) 
maker.retract(Buy|Sell)Offer({...}) 
 
 
// manipulate funds 
maker.withdraw(...) = maker.contract.withdraw(...)
maker.fund(...) 
// send money from current address to mangrove, and give it to maker 
maker.fundFromCurrentAddress(...) 
 
 
// return current order books 
ob = market.buyOffers() // returns array of offers</offer>
ob = market.sellOffers() 
 
 
// subscribe to order book change events (for interface builders) 
market.onChange((buyOffers,sellOffers) => ...) 
 
// universal option: {dontSend:true} 
returns tx and calldata but don't send it 
useful for debug and for routing through governance 
 
// TODO: some mangrove methods still not present
