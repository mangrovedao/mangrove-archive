/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MangroveInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "_config(address,address)": FunctionFragment;
    "activate(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "allowances(address,address,address,address)": FunctionFragment;
    "approve(address,address,address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "best(address,address)": FunctionFragment;
    "config(address,address)": FunctionFragment;
    "deactivate(address,address)": FunctionFragment;
    "flashloan(tuple,address)": FunctionFragment;
    "fund(address)": FunctionFragment;
    "global()": FunctionFragment;
    "governance()": FunctionFragment;
    "isLive(bytes32)": FunctionFragment;
    "kill()": FunctionFragment;
    "locals(address,address)": FunctionFragment;
    "locked(address,address)": FunctionFragment;
    "marketOrder(address,address,uint256,uint256,bool)": FunctionFragment;
    "marketOrderFor(address,address,uint256,uint256,bool,address)": FunctionFragment;
    "newOffer(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "offerDetails(address,address,uint256)": FunctionFragment;
    "offerInfo(address,address,uint256)": FunctionFragment;
    "offers(address,address,uint256)": FunctionFragment;
    "permit(address,address,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "retractOffer(address,address,uint256,bool)": FunctionFragment;
    "setDensity(address,address,uint256)": FunctionFragment;
    "setFee(address,address,uint256)": FunctionFragment;
    "setGasbase(address,address,uint256,uint256)": FunctionFragment;
    "setGasmax(uint256)": FunctionFragment;
    "setGasprice(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setMonitor(address)": FunctionFragment;
    "setNotify(bool)": FunctionFragment;
    "setUseOracle(bool)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "snipe(address,address,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "snipeFor(address,address,uint256,uint256,uint256,uint256,bool,address)": FunctionFragment;
    "snipes(address,address,uint256[4][],bool)": FunctionFragment;
    "snipesFor(address,address,uint256[4][],bool,address)": FunctionFragment;
    "updateOffer(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_config",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "activate",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowances",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "best",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "config",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "flashloan",
    values: [
      {
        base: string;
        quote: string;
        offerId: BigNumberish;
        offer: BytesLike;
        wants: BigNumberish;
        gives: BigNumberish;
        offerDetail: BytesLike;
        global: BytesLike;
        local: BytesLike;
      },
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "fund", values: [string]): string;
  encodeFunctionData(functionFragment: "global", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isLive", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "locals",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketOrder",
    values: [string, string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "marketOrderFor",
    values: [string, string, BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newOffer",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "offerDetails",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerInfo",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retractOffer",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDensity",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasbase",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasmax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasprice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMonitor", values: [string]): string;
  encodeFunctionData(functionFragment: "setNotify", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setUseOracle",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "snipe",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "snipeFor",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "snipes",
    values: [
      string,
      string,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "snipesFor",
    values: [
      string,
      string,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOffer",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "best", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashloan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "global", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOrderFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offerDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offerInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retractOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDensity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGasbase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGasmax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGasprice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMonitor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNotify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUseOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "snipe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "snipeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "snipes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "snipesFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class Mangrove extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MangroveInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    _config(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _global: string; _local: string }>;

    activate(
      base: string,
      quote: string,
      fee: BigNumberish,
      density: BigNumberish,
      overhead_gasbase: BigNumberish,
      offer_gasbase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowances(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      base: string,
      quote: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    best(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    config(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [string, boolean, boolean, BigNumber, BigNumber, boolean] & {
            monitor: string;
            useOracle: boolean;
            notify: boolean;
            gasprice: BigNumber;
            gasmax: BigNumber;
            dead: boolean;
          },
          [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber
          ] & {
            active: boolean;
            fee: BigNumber;
            density: BigNumber;
            overhead_gasbase: BigNumber;
            offer_gasbase: BigNumber;
            lock: boolean;
            best: BigNumber;
            last: BigNumber;
          }
        ] & {
          global: [string, boolean, boolean, BigNumber, BigNumber, boolean] & {
            monitor: string;
            useOracle: boolean;
            notify: boolean;
            gasprice: BigNumber;
            gasmax: BigNumber;
            dead: boolean;
          };
          local: [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber
          ] & {
            active: boolean;
            fee: BigNumber;
            density: BigNumber;
            overhead_gasbase: BigNumber;
            offer_gasbase: BigNumber;
            lock: boolean;
            best: BigNumber;
            last: BigNumber;
          };
        }
      ] & {
        ret: [
          [string, boolean, boolean, BigNumber, BigNumber, boolean] & {
            monitor: string;
            useOracle: boolean;
            notify: boolean;
            gasprice: BigNumber;
            gasmax: BigNumber;
            dead: boolean;
          },
          [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber
          ] & {
            active: boolean;
            fee: BigNumber;
            density: BigNumber;
            overhead_gasbase: BigNumber;
            offer_gasbase: BigNumber;
            lock: boolean;
            best: BigNumber;
            last: BigNumber;
          }
        ] & {
          global: [string, boolean, boolean, BigNumber, BigNumber, boolean] & {
            monitor: string;
            useOracle: boolean;
            notify: boolean;
            gasprice: BigNumber;
            gasmax: BigNumber;
            dead: boolean;
          };
          local: [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber
          ] & {
            active: boolean;
            fee: BigNumber;
            density: BigNumber;
            overhead_gasbase: BigNumber;
            offer_gasbase: BigNumber;
            lock: boolean;
            best: BigNumber;
            last: BigNumber;
          };
        };
      }
    >;

    deactivate(
      base: string,
      quote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashloan(
      sor: {
        base: string;
        quote: string;
        offerId: BigNumberish;
        offer: BytesLike;
        wants: BigNumberish;
        gives: BigNumberish;
        offerDetail: BytesLike;
        global: BytesLike;
        local: BytesLike;
      },
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fund(address)"(
      maker: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fund()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    global(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    isLive(offer: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    locals(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    locked(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketOrder(
      base: string,
      quote: string,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      fillWants: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketOrderFor(
      base: string,
      quote: string,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      fillWants: boolean,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newOffer(
      base: string,
      quote: string,
      wants: BigNumberish,
      gives: BigNumberish,
      gasreq: BigNumberish,
      gasprice: BigNumberish,
      pivotId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    offerDetails(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    offerInfo(
      base: string,
      quote: string,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          prev: BigNumber;
          next: BigNumber;
          gives: BigNumber;
          wants: BigNumber;
          gasprice: BigNumber;
        },
        [string, BigNumber, BigNumber, BigNumber] & {
          maker: string;
          gasreq: BigNumber;
          overhead_gasbase: BigNumber;
          offer_gasbase: BigNumber;
        }
      ]
    >;

    offers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    permit(
      base: string,
      quote: string,
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retractOffer(
      base: string,
      quote: string,
      offerId: BigNumberish,
      deprovision: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDensity(
      base: string,
      quote: string,
      density: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      base: string,
      quote: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGasbase(
      base: string,
      quote: string,
      overhead_gasbase: BigNumberish,
      offer_gasbase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGasmax(
      gasmax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGasprice(
      gasprice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      governanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMonitor(
      monitor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNotify(
      notify: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUseOracle(
      useOracle: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVault(
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snipe(
      base: string,
      quote: string,
      offerId: BigNumberish,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      gasreq: BigNumberish,
      fillWants: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snipeFor(
      base: string,
      quote: string,
      offerId: BigNumberish,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      gasreq: BigNumberish,
      fillWants: boolean,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snipes(
      base: string,
      quote: string,
      targets: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      fillWants: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snipesFor(
      base: string,
      quote: string,
      targets: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      fillWants: boolean,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOffer(
      base: string,
      quote: string,
      wants: BigNumberish,
      gives: BigNumberish,
      gasreq: BigNumberish,
      gasprice: BigNumberish,
      pivotId: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  _config(
    base: string,
    quote: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { _global: string; _local: string }>;

  activate(
    base: string,
    quote: string,
    fee: BigNumberish,
    density: BigNumberish,
    overhead_gasbase: BigNumberish,
    offer_gasbase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowances(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    base: string,
    quote: string,
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  best(
    base: string,
    quote: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  config(
    base: string,
    quote: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, boolean, boolean, BigNumber, BigNumber, boolean] & {
        monitor: string;
        useOracle: boolean;
        notify: boolean;
        gasprice: BigNumber;
        gasmax: BigNumber;
        dead: boolean;
      },
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        active: boolean;
        fee: BigNumber;
        density: BigNumber;
        overhead_gasbase: BigNumber;
        offer_gasbase: BigNumber;
        lock: boolean;
        best: BigNumber;
        last: BigNumber;
      }
    ] & {
      global: [string, boolean, boolean, BigNumber, BigNumber, boolean] & {
        monitor: string;
        useOracle: boolean;
        notify: boolean;
        gasprice: BigNumber;
        gasmax: BigNumber;
        dead: boolean;
      };
      local: [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        active: boolean;
        fee: BigNumber;
        density: BigNumber;
        overhead_gasbase: BigNumber;
        offer_gasbase: BigNumber;
        lock: boolean;
        best: BigNumber;
        last: BigNumber;
      };
    }
  >;

  deactivate(
    base: string,
    quote: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashloan(
    sor: {
      base: string;
      quote: string;
      offerId: BigNumberish;
      offer: BytesLike;
      wants: BigNumberish;
      gives: BigNumberish;
      offerDetail: BytesLike;
      global: BytesLike;
      local: BytesLike;
    },
    taker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fund(address)"(
    maker: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fund()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  global(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  isLive(offer: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  kill(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  locals(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  locked(
    base: string,
    quote: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketOrder(
    base: string,
    quote: string,
    takerWants: BigNumberish,
    takerGives: BigNumberish,
    fillWants: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketOrderFor(
    base: string,
    quote: string,
    takerWants: BigNumberish,
    takerGives: BigNumberish,
    fillWants: boolean,
    taker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newOffer(
    base: string,
    quote: string,
    wants: BigNumberish,
    gives: BigNumberish,
    gasreq: BigNumberish,
    gasprice: BigNumberish,
    pivotId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  offerDetails(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  offerInfo(
    base: string,
    quote: string,
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        prev: BigNumber;
        next: BigNumber;
        gives: BigNumber;
        wants: BigNumber;
        gasprice: BigNumber;
      },
      [string, BigNumber, BigNumber, BigNumber] & {
        maker: string;
        gasreq: BigNumber;
        overhead_gasbase: BigNumber;
        offer_gasbase: BigNumber;
      }
    ]
  >;

  offers(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  permit(
    base: string,
    quote: string,
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retractOffer(
    base: string,
    quote: string,
    offerId: BigNumberish,
    deprovision: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDensity(
    base: string,
    quote: string,
    density: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    base: string,
    quote: string,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGasbase(
    base: string,
    quote: string,
    overhead_gasbase: BigNumberish,
    offer_gasbase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGasmax(
    gasmax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGasprice(
    gasprice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    governanceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMonitor(
    monitor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNotify(
    notify: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUseOracle(
    useOracle: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVault(
    vaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snipe(
    base: string,
    quote: string,
    offerId: BigNumberish,
    takerWants: BigNumberish,
    takerGives: BigNumberish,
    gasreq: BigNumberish,
    fillWants: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snipeFor(
    base: string,
    quote: string,
    offerId: BigNumberish,
    takerWants: BigNumberish,
    takerGives: BigNumberish,
    gasreq: BigNumberish,
    fillWants: boolean,
    taker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snipes(
    base: string,
    quote: string,
    targets: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
    fillWants: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snipesFor(
    base: string,
    quote: string,
    targets: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
    fillWants: boolean,
    taker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOffer(
    base: string,
    quote: string,
    wants: BigNumberish,
    gives: BigNumberish,
    gasreq: BigNumberish,
    gasprice: BigNumberish,
    pivotId: BigNumberish,
    offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    _config(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _global: string; _local: string }>;

    activate(
      base: string,
      quote: string,
      fee: BigNumberish,
      density: BigNumberish,
      overhead_gasbase: BigNumberish,
      offer_gasbase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowances(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      base: string,
      quote: string,
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    best(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, boolean, boolean, BigNumber, BigNumber, boolean] & {
          monitor: string;
          useOracle: boolean;
          notify: boolean;
          gasprice: BigNumber;
          gasmax: BigNumber;
          dead: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          active: boolean;
          fee: BigNumber;
          density: BigNumber;
          overhead_gasbase: BigNumber;
          offer_gasbase: BigNumber;
          lock: boolean;
          best: BigNumber;
          last: BigNumber;
        }
      ] & {
        global: [string, boolean, boolean, BigNumber, BigNumber, boolean] & {
          monitor: string;
          useOracle: boolean;
          notify: boolean;
          gasprice: BigNumber;
          gasmax: BigNumber;
          dead: boolean;
        };
        local: [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          active: boolean;
          fee: BigNumber;
          density: BigNumber;
          overhead_gasbase: BigNumber;
          offer_gasbase: BigNumber;
          lock: boolean;
          best: BigNumber;
          last: BigNumber;
        };
      }
    >;

    deactivate(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<void>;

    flashloan(
      sor: {
        base: string;
        quote: string;
        offerId: BigNumberish;
        offer: BytesLike;
        wants: BigNumberish;
        gives: BigNumberish;
        offerDetail: BytesLike;
        global: BytesLike;
        local: BytesLike;
      },
      taker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fund(address)"(maker: string, overrides?: CallOverrides): Promise<void>;

    "fund()"(overrides?: CallOverrides): Promise<void>;

    global(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    isLive(offer: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    kill(overrides?: CallOverrides): Promise<void>;

    locals(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    locked(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketOrder(
      base: string,
      quote: string,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      fillWants: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    marketOrderFor(
      base: string,
      quote: string,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      fillWants: boolean,
      taker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { takerGot: BigNumber; takerGave: BigNumber }
    >;

    newOffer(
      base: string,
      quote: string,
      wants: BigNumberish,
      gives: BigNumberish,
      gasreq: BigNumberish,
      gasprice: BigNumberish,
      pivotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    offerDetails(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    offerInfo(
      base: string,
      quote: string,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          prev: BigNumber;
          next: BigNumber;
          gives: BigNumber;
          wants: BigNumber;
          gasprice: BigNumber;
        },
        [string, BigNumber, BigNumber, BigNumber] & {
          maker: string;
          gasreq: BigNumber;
          overhead_gasbase: BigNumber;
          offer_gasbase: BigNumber;
        }
      ]
    >;

    offers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    permit(
      base: string,
      quote: string,
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    retractOffer(
      base: string,
      quote: string,
      offerId: BigNumberish,
      deprovision: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDensity(
      base: string,
      quote: string,
      density: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      base: string,
      quote: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasbase(
      base: string,
      quote: string,
      overhead_gasbase: BigNumberish,
      offer_gasbase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasmax(gasmax: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setGasprice(
      gasprice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      governanceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMonitor(monitor: string, overrides?: CallOverrides): Promise<void>;

    setNotify(notify: boolean, overrides?: CallOverrides): Promise<void>;

    setUseOracle(useOracle: boolean, overrides?: CallOverrides): Promise<void>;

    setVault(vaultAddress: string, overrides?: CallOverrides): Promise<void>;

    snipe(
      base: string,
      quote: string,
      offerId: BigNumberish,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      gasreq: BigNumberish,
      fillWants: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    snipeFor(
      base: string,
      quote: string,
      offerId: BigNumberish,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      gasreq: BigNumberish,
      fillWants: boolean,
      taker: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        success: boolean;
        takerGot: BigNumber;
        takerGave: BigNumber;
      }
    >;

    snipes(
      base: string,
      quote: string,
      targets: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      fillWants: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    snipesFor(
      base: string,
      quote: string,
      targets: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      fillWants: boolean,
      taker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        successes: BigNumber;
        takerGot: BigNumber;
        takerGave: BigNumber;
      }
    >;

    updateOffer(
      base: string,
      quote: string,
      wants: BigNumberish,
      gives: BigNumberish,
      gasreq: BigNumberish,
      gasprice: BigNumberish,
      pivotId: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    _config(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activate(
      base: string,
      quote: string,
      fee: BigNumberish,
      density: BigNumberish,
      overhead_gasbase: BigNumberish,
      offer_gasbase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowances(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      base: string,
      quote: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    best(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivate(
      base: string,
      quote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashloan(
      sor: {
        base: string;
        quote: string;
        offerId: BigNumberish;
        offer: BytesLike;
        wants: BigNumberish;
        gives: BigNumberish;
        offerDetail: BytesLike;
        global: BytesLike;
        local: BytesLike;
      },
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fund(address)"(
      maker: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fund()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    global(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    isLive(offer: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    locals(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketOrder(
      base: string,
      quote: string,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      fillWants: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketOrderFor(
      base: string,
      quote: string,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      fillWants: boolean,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newOffer(
      base: string,
      quote: string,
      wants: BigNumberish,
      gives: BigNumberish,
      gasreq: BigNumberish,
      gasprice: BigNumberish,
      pivotId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    offerDetails(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerInfo(
      base: string,
      quote: string,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      base: string,
      quote: string,
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retractOffer(
      base: string,
      quote: string,
      offerId: BigNumberish,
      deprovision: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDensity(
      base: string,
      quote: string,
      density: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      base: string,
      quote: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGasbase(
      base: string,
      quote: string,
      overhead_gasbase: BigNumberish,
      offer_gasbase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGasmax(
      gasmax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGasprice(
      gasprice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      governanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMonitor(
      monitor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNotify(
      notify: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUseOracle(
      useOracle: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVault(
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snipe(
      base: string,
      quote: string,
      offerId: BigNumberish,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      gasreq: BigNumberish,
      fillWants: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snipeFor(
      base: string,
      quote: string,
      offerId: BigNumberish,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      gasreq: BigNumberish,
      fillWants: boolean,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snipes(
      base: string,
      quote: string,
      targets: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      fillWants: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snipesFor(
      base: string,
      quote: string,
      targets: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      fillWants: boolean,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOffer(
      base: string,
      quote: string,
      wants: BigNumberish,
      gives: BigNumberish,
      gasreq: BigNumberish,
      gasprice: BigNumberish,
      pivotId: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _config(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activate(
      base: string,
      quote: string,
      fee: BigNumberish,
      density: BigNumberish,
      overhead_gasbase: BigNumberish,
      offer_gasbase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowances(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      base: string,
      quote: string,
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    best(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivate(
      base: string,
      quote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashloan(
      sor: {
        base: string;
        quote: string;
        offerId: BigNumberish;
        offer: BytesLike;
        wants: BigNumberish;
        gives: BigNumberish;
        offerDetail: BytesLike;
        global: BytesLike;
        local: BytesLike;
      },
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fund(address)"(
      maker: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fund()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    global(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLive(
      offer: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    locals(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketOrder(
      base: string,
      quote: string,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      fillWants: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketOrderFor(
      base: string,
      quote: string,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      fillWants: boolean,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newOffer(
      base: string,
      quote: string,
      wants: BigNumberish,
      gives: BigNumberish,
      gasreq: BigNumberish,
      gasprice: BigNumberish,
      pivotId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerDetails(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerInfo(
      base: string,
      quote: string,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      base: string,
      quote: string,
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retractOffer(
      base: string,
      quote: string,
      offerId: BigNumberish,
      deprovision: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDensity(
      base: string,
      quote: string,
      density: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      base: string,
      quote: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGasbase(
      base: string,
      quote: string,
      overhead_gasbase: BigNumberish,
      offer_gasbase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGasmax(
      gasmax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGasprice(
      gasprice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      governanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMonitor(
      monitor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNotify(
      notify: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUseOracle(
      useOracle: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVault(
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snipe(
      base: string,
      quote: string,
      offerId: BigNumberish,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      gasreq: BigNumberish,
      fillWants: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snipeFor(
      base: string,
      quote: string,
      offerId: BigNumberish,
      takerWants: BigNumberish,
      takerGives: BigNumberish,
      gasreq: BigNumberish,
      fillWants: boolean,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snipes(
      base: string,
      quote: string,
      targets: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      fillWants: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snipesFor(
      base: string,
      quote: string,
      targets: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      fillWants: boolean,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOffer(
      base: string,
      quote: string,
      wants: BigNumberish,
      gives: BigNumberish,
      gasreq: BigNumberish,
      gasprice: BigNumberish,
      pivotId: BigNumberish,
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
