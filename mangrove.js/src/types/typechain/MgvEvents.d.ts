/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MgvEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "Approval(address,address,address,address,uint256)": EventFragment;
    "Credit(address,uint256)": EventFragment;
    "Debit(address,uint256)": EventFragment;
    "Kill()": EventFragment;
    "MakerFail(address,address,uint256,address,uint256,uint256,bytes32,bytes32)": EventFragment;
    "NewMgv()": EventFragment;
    "PosthookFail(address,address,uint256,bytes32)": EventFragment;
    "RetractOffer(address,address,uint256)": EventFragment;
    "SetActive(address,address,bool)": EventFragment;
    "SetDensity(address,address,uint256)": EventFragment;
    "SetFee(address,address,uint256)": EventFragment;
    "SetGasbase(address,address,uint256,uint256)": EventFragment;
    "SetGasmax(uint256)": EventFragment;
    "SetGasprice(uint256)": EventFragment;
    "SetGovernance(address)": EventFragment;
    "SetMonitor(address)": EventFragment;
    "SetNotify(bool)": EventFragment;
    "SetUseOracle(bool)": EventFragment;
    "SetVault(address)": EventFragment;
    "Success(address,address,uint256,address,uint256,uint256)": EventFragment;
    "WriteOffer(address,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Credit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Debit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Kill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakerFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMgv"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PosthookFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RetractOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDensity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasbase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasmax"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasprice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMonitor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNotify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUseOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Success"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WriteOffer"): EventFragment;
}

export class MgvEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MgvEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    Approval(
      base?: string | null,
      quote?: string | null,
      owner?: null,
      spender?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        base: string;
        quote: string;
        owner: string;
        spender: string;
        value: BigNumber;
      }
    >;

    Credit(
      maker?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { maker: string; amount: BigNumber }
    >;

    Debit(
      maker?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { maker: string; amount: BigNumber }
    >;

    Kill(): TypedEventFilter<[], {}>;

    MakerFail(
      base?: string | null,
      quote?: string | null,
      offerId?: null,
      taker?: null,
      takerWants?: null,
      takerGives?: null,
      statusCode?: null,
      makerData?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, BigNumber, string, string],
      {
        base: string;
        quote: string;
        offerId: BigNumber;
        taker: string;
        takerWants: BigNumber;
        takerGives: BigNumber;
        statusCode: string;
        makerData: string;
      }
    >;

    NewMgv(): TypedEventFilter<[], {}>;

    PosthookFail(
      base?: string | null,
      quote?: string | null,
      offerId?: null,
      makerData?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { base: string; quote: string; offerId: BigNumber; makerData: string }
    >;

    RetractOffer(
      base?: string | null,
      quote?: string | null,
      offerId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { base: string; quote: string; offerId: BigNumber }
    >;

    SetActive(
      base?: string | null,
      quote?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { base: string; quote: string; value: boolean }
    >;

    SetDensity(
      base?: string | null,
      quote?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { base: string; quote: string; value: BigNumber }
    >;

    SetFee(
      base?: string | null,
      quote?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { base: string; quote: string; value: BigNumber }
    >;

    SetGasbase(
      base?: string | null,
      quote?: string | null,
      overhead_gasbase?: null,
      offer_gasbase?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        base: string;
        quote: string;
        overhead_gasbase: BigNumber;
        offer_gasbase: BigNumber;
      }
    >;

    SetGasmax(
      value?: null
    ): TypedEventFilter<[BigNumber], { value: BigNumber }>;

    SetGasprice(
      value?: null
    ): TypedEventFilter<[BigNumber], { value: BigNumber }>;

    SetGovernance(value?: null): TypedEventFilter<[string], { value: string }>;

    SetMonitor(value?: null): TypedEventFilter<[string], { value: string }>;

    SetNotify(value?: null): TypedEventFilter<[boolean], { value: boolean }>;

    SetUseOracle(value?: null): TypedEventFilter<[boolean], { value: boolean }>;

    SetVault(value?: null): TypedEventFilter<[string], { value: string }>;

    Success(
      base?: string | null,
      quote?: string | null,
      offerId?: null,
      taker?: null,
      takerWants?: null,
      takerGives?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, BigNumber],
      {
        base: string;
        quote: string;
        offerId: BigNumber;
        taker: string;
        takerWants: BigNumber;
        takerGives: BigNumber;
      }
    >;

    WriteOffer(
      base?: string | null,
      quote?: string | null,
      maker?: null,
      makerWants?: null,
      makerGives?: null,
      gasprice?: null,
      gasreq?: null,
      offerId?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        base: string;
        quote: string;
        maker: string;
        makerWants: BigNumber;
        makerGives: BigNumber;
        gasprice: BigNumber;
        gasreq: BigNumber;
        offerId: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
