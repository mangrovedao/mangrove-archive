/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MgvReader, MgvReaderInterface } from "../MgvReader";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_mgv",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "base",
        type: "address",
      },
      {
        internalType: "address",
        name: "quote",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "num_offers",
        type: "uint256",
      },
    ],
    name: "book",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "prev",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "next",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gives",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "wants",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasprice",
            type: "uint256",
          },
        ],
        internalType: "struct MgvLib.Offer[]",
        name: "",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "gasreq",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "overhead_gasbase",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "offer_gasbase",
            type: "uint256",
          },
        ],
        internalType: "struct MgvLib.OfferDetail[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "base",
        type: "address",
      },
      {
        internalType: "address",
        name: "quote",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "num_offers",
        type: "uint256",
      },
    ],
    name: "packed_book",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610b6c380380610b6c83398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c610ac96100a36000398061018652806102a1528061046c5280610532528061060f5250610ac96000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a43a6b821461003b578063d411f78214610066575b600080fd5b61004e610049366004610759565b610088565b60405161005d939291906109dc565b60405180910390f35b610079610074366004610759565b61038e565b60405161005d93929190610999565b606080606060008467ffffffffffffffff811180156100a657600080fd5b506040519080825280602002602001820160405280156100d0578160200160208202803683370190505b50905060008567ffffffffffffffff811180156100ec57600080fd5b5060405190808252806020026020018201604052801561012657816020015b6101136106ec565b81526020019060019003908161010b5790505b50905060008667ffffffffffffffff8111801561014257600080fd5b5060405190808252806020026020018201604052801561017c57816020015b61016961071b565b8152602001906001900390816101615790505b50905060006102347f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d3cac81f8c8c6040518363ffffffff1660e01b81526004016101df929190610941565b60206040518083038186803b1580156101f757600080fd5b505afa15801561020b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022f9190610799565b6106d6565b905060005b811580159061024757508881105b1561037e578185828151811061025957fe5b60209081029190910101526040517f8c66715c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690638c66715c906102da908e908e908790600401610968565b6101206040518083038186803b1580156102f357600080fd5b505afa158015610307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032b91906107b1565b85838151811061033757fe5b6020026020010185848151811061034a57fe5b60200260200101829052829052505083818151811061036557fe5b6020026020010151602001519150806001019050610239565b5092999198509650945050505050565b606080606060008467ffffffffffffffff811180156103ac57600080fd5b506040519080825280602002602001820160405280156103d6578160200160208202803683370190505b50905060008567ffffffffffffffff811180156103f257600080fd5b5060405190808252806020026020018201604052801561041c578160200160208202803683370190505b50905060008667ffffffffffffffff8111801561043857600080fd5b50604051908082528060200260200182016040528015610462578160200160208202803683370190505b50905060006104c57f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d3cac81f8c8c6040518363ffffffff1660e01b81526004016101df929190610941565b905060005b81158015906104d857508881105b1561037e57818582815181106104ea57fe5b60209081029190910101526040517f68c13d6b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906368c13d6b9061056b908e908e908790600401610968565b60206040518083038186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190610799565b8482815181106105c757fe5b60209081029190910101526040517f5722647b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635722647b90610648908e908e908790600401610968565b60206040518083038186803b15801561066057600080fd5b505afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106989190610799565b8382815181106106a457fe5b6020026020010181815250506106cc8482815181106106bf57fe5b60200260200101516106e1565b91506001016104ca565b60781c62ffffff1690565b60d01c62ffffff1690565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b60008060006060848603121561076d578283fd5b833561077881610a6e565b9250602084013561078881610a6e565b929592945050506040919091013590565b6000602082840312156107aa578081fd5b5051919050565b6000808284036101208112156107c5578283fd5b60a08112156107d2578283fd5b6040805160a0810167ffffffffffffffff82821081831117156107f157fe5b81845287518352602088015160208401528388015184840152606088015160608401526080880151608084015282965060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6086011215610850578586fd5b83519450608085019250848310818411171561086857fe5b5050815260a085015161087a81610a6e565b825260c0850151602083015260e0850151908201526101009093015160608401525092909150565b6000815180845260208085019450808401835b838110156108d1578151875295820195908201906001016108b5565b509495945050505050565b6000815180845260208085019450808401835b838110156108d1578151805173ffffffffffffffffffffffffffffffffffffffff16885283810151848901526040808201519089015260609081015190880152608090960195908201906001016108ef565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b6000606082526109ac60608301866108a2565b82810360208401526109be81866108a2565b905082810360408401526109d281856108a2565b9695505050505050565b600060608083526109ef818401876108a2565b838103602085810191909152865180835287820192820190855b81811015610a4d578451805184528481015185850152604080820151908501528681015187850152608090810151908401529383019360a090920191600101610a09565b50508581036040870152610a6181886108dc565b9998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a9057600080fd5b5056fea264697066735822122008c164926e3d43e32c5cf21f701365685c84807d50f459e64b65c001a458f99764736f6c63430007060033";

export class MgvReader__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _mgv: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MgvReader> {
    return super.deploy(_mgv, overrides || {}) as Promise<MgvReader>;
  }
  getDeployTransaction(
    _mgv: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_mgv, overrides || {});
  }
  attach(address: string): MgvReader {
    return super.attach(address) as MgvReader;
  }
  connect(signer: Signer): MgvReader__factory {
    return super.connect(signer) as MgvReader__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MgvReaderInterface {
    return new utils.Interface(_abi) as MgvReaderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MgvReader {
    return new Contract(address, _abi, signerOrProvider) as MgvReader;
  }
}
